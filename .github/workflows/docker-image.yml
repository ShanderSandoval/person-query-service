name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Install Docker on EC2
      run: |
        echo "ðŸ“Œ Verificando e instalando Docker en EC2..."
        
        # Obtener la IP de la instancia EC2
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ECS-Instance" --query "Reservations[*].Instances[*].InstanceId" --output text)
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

        # Ejecutar comandos de instalaciÃ³n de Docker en la instancia EC2 vÃ­a SSH
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws-key.pem ubuntu@$PUBLIC_IP << 'EOF'
          sudo apt-get remove -y containerd || true
          sudo apt-get update -y
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        EOF

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
        docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:latest
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment
