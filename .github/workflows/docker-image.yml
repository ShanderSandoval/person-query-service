name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  create-ecr-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Crear repositorio en ECR si no existe
        run: |
          REPO_NAME="mi-aplicacion"
          if ! aws ecr describe-repositories --repository-names $REPO_NAME > /dev/null 2>&1; then
            aws ecr create-repository --repository-name $REPO_NAME
          fi

  build-and-push:
    needs: create-ecr-repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Autenticarse en Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Construir y subir imagen Docker
        run: |
          IMAGE_NAME="mi-aplicacion"
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY="$AWS_ACCOUNT_ID.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$IMAGE_NAME"
          docker build -t $ECR_REPOSITORY:latest .
          docker push $ECR_REPOSITORY:latest

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Actualizar servicio en ECS
        run: |
          CLUSTER_NAME="mi-cluster"
          SERVICE_NAME="mi-servicio"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
